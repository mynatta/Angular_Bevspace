import { Component, OnInit,  } from '@angular/core';
 
let front = false;
// let stream = null as any;

// // camera stream video element
// let videoElm = <HTMLVideoElement>document.querySelector('#videoelementId');
// // flip button element
// let flipBtn = <HTMLButtonElement>document.querySelector('flip-button');
// window.onload=function(){
// }

// // default user media options
// const constraints = {
//     audio: false,

//     video: {
//       facingMode: front ? "user" : "environment",
//       // facingMode: "user",
//       frameRate: { ideal: 1080, max: 60 },
//       width: { max: 500 },
//       height: { max: 500 }
//     }
    
//   }
// let shouldFaceUser = true;



// function capture() {
//   navigator.mediaDevices.getUserMedia(constraints)
//     .then(function(mediaStream) {
//       stream  = mediaStream;
//       videoElm.srcObject = mediaStream;
//       videoElm.play();
//     })
//     .catch(function(err) {
//       console.log(err)
//     });
// }

// flipBtn.addEventListener('click', function handleClick(event){
//   console.log('button clicked');
//   if( stream == null ) 
//   return
//   // we need to flip, stop everything
//   stream.getTracks().forEach(t => {
//     t.stop();
//   });
//   // toggle / flip
//   shouldFaceUser = !shouldFaceUser;
//   capture();
// })

// capture();










const constraints = {
  audio: false,
  // for mobile device
  // video: {
  //   facingMode: { exact: "environment" },
  //   width: { min: 1280 },
  //   height: { min: 720 }
  // }
  video: {
    facingMode: front ? "user" : "environment",
    frameRate: { ideal: 1080, max: 60 },
    width: { max: 240 },
    height: { max: 150 }
  }
}



@Component({
  selector: 'app-camera',
  templateUrl: './camera.component.html',
  styleUrls: ['./camera.component.css']
})
export class CameraComponent {
  

   ngOnInit() {
    console.log("onInit")
    this.openCamera(event);
   }
   myVideo: any;

   
  
  public openCamera(event?: any){
    console.log("opencamerafunction")
    navigator.mediaDevices.getUserMedia(this.mediaoption())
    .then(function(mediaStream)  {
      const myVideo = <HTMLVideoElement>document.querySelector('#videoelementId');
      myVideo.srcObject = mediaStream;
      console.log(mediaStream)
      myVideo.onloadedmetadata = function(mediaStream) {
      myVideo.play();
      };
      // if(mediaStream) {
      //   mediaStream.getTracks().forEach(track => track.stop()) 
      // }
      // setTimeout(() => {
      //   const tracks = mediaStream.getTracks()
      //   tracks[0].stop()
      // }, 5000)
    })
    .catch((error) => {
      
      console.error(`${error.name}: ${error.message}`);
    });

    



}

public switchcamera(event?: any){
  // this.myVideo.getTracks().forEach( (track) => {
  //   track.stop();
  //   })
  // this.tracks = this.myVideo.getTracks()
  // this.tracks.stop();
  
  console.log(front)
  front = !front;
  //this.mediaoption(event)
  this.openCamera(event)
}

public mediaoption(event?: any){
  
 

  console.log(front)
  const constraints = {
    audio: false,
    // for mobile device
    // video: {
    //   facingMode: { exact: "environment" },
    //   width: { min: 1280 },
    //   height: { min: 720 }
    // }
    video: {
      facingMode: front ? "user" : "environment",
      // facingMode: "user",
      frameRate: { ideal: 1080, max: 60 },
      width: { max: 500 },
      height: { max: 500 }
    }
    
  }
  console.log(constraints)
  return constraints
}













  

 

}

function mediaoption(): MediaStreamConstraints | undefined {
  const constraints = {
    audio: false,
    // for mobile device
    // video: {
    //   facingMode: { exact: "environment" },
    //   width: { min: 1280 },
    //   height: { min: 720 }
    // }
    video: {
      facingMode: front ? "user" : "environment",
      // facingMode: "user",
      frameRate: { ideal: 1080, max: 60 },
      width: { max: 500 },
      height: { max: 500 }
    }
    
  }
  console.log(constraints)
  return constraints
}

